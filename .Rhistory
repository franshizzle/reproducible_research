east <- subset(pollution, region =="east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region =="west")$pm25, col = green)
hist(subset(pollution, region =="west")$pm25, col = "green")
skip()
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(polltuion$latitude, ppm, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 2, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude ~ west$pm25, main = "West")
plot(west$latitude,  west$pm25, main = "West")
plot(east$latitude,  east$pm25, main = "East")
library(swirl)
swirl()
?devices
?Devices
plot(faithful, eruption, waiting)
plot(faithful, eruptions, waiting)
info()
skip()
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser Data"))
title(main = "Old Faithful Geyser Data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting)
)
title(main = "Old Faithful Geyser data")
library("swirl")
swirl()
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed ~ dist))
with(cars, plot(speed, dist))
info()
with(cars, plot(speed,dist, mean(cars$speed)))
skip()
head(state)
table(state$region)
?xyplot
xyplot(Life.Exp ~ Income | region, state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality)
xyplot(Ozone~Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col = "red", main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data =airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~f|f, layout = c(2,1))
xyplot(y~x | f, layout = c(2,1))
v``
v1
v2
myedit("plot1.R")
pathtofile("plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabel.R)
myedit(myLabels.R)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color ~ cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
next()
skip()
xyplot(price~carat | color * cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
sample(colors(), 10)
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
library(swirl)
swirl()
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3
skip()
p3(5)
plot(x, y, pch = 19, col = rgb(0,.5,.5))
plot(x, y, pch = 19, col = rgb(0,.5,.5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(dsipl, hwy, data = mpg, facets = .~ drv)
qplot(displ, hwy, data = mpg, facets = .~ drv)
qplot(hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = .~drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., bindwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point(), geom_smooth()
skip()
g+geom_point()+geom_smooth("lm")
skip()
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title = "Swirl Rules!", x= "Displacement", y = "Hwy Mileage")
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))+labs(title = "Swirl Rules!")+labs( x= "Displacement", y = "Hwy Mileage")
g+geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage"
)
g+geom_smooth(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se =FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g+geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3),)
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line(0)
g+geom_line()
skip()
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g <- ggplot(dataset, aes(x=displ, y=hwy, color = factor(year)))
skip()
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size = 2, color = "black")+labs(x="Displacement", y = "Highway Mileage, title = "Swirl Rules!"")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size = 2, color = "black")+labs(x="Displacement", y = "Highway Mileage, title = "Swirl Rules!")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size = 2, color = "black")+labs(x="Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 1849/30)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, gemom = "density", color = cut)
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method = "lm")+facets = .~cut
qplot(carat, price, data = diamonds, color = cut)+geom_smooth(method = "lm")+facets(.~cut)
skip()
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$cara, seq(0,1,length = 4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g+geom_point(alpha = 1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha = 1/3)+facet_grid(cut~car2)+geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~Time | Diet, BodyWeight)
library(swirl)
swirl()
swirl()
ls()
rm(list = ls())
ls()
swirl()
rm(list=ls(all=TRUE))
swirl()
xy.coords(x, y, xlable, ylabel, log)
remove.packages(swirl())
remove.packages(swirl)
remove.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
sdv1$v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
skip()
myImage(a1)
skip()
myImage(a2)
skip()
skip()
dim(ssd)
names(ssd[562:563,])
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
showMe(c(1:6))
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
skip()
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
skip()
table(kCluster$cluster, sub1$activity)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size ==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab = "Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size ==49)
plot(kClust$centers[walkdown,1:12], pch=19, ylab = "Walkdown Cluster")
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
wcol
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- as.Date(pm1$Date)
dates <- as.Date(pm1$Date, "%Y%m%d")
dates <- as.Date(as.character(pm1$Date), "%Y%m%d")
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
head(negative)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36, county.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site, nrow))
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0$Date), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2,52), mrg[,3]))
with(mrg, points(rep(2,52), mrg[,3]))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("activity.csv")
daily.steps <- aggregate(df$steps ~ df$date, FUN = sum)
colnames(daily.steps) <- c("date", "steps")
## Remove NAs
daily.steps <- daily.steps[!is.na(daily.steps$steps),]
hist(x=daily.steps$steps, col = "orange", xlab = "Total Daily Steps", main = "Histogram of Total Daily Steps - Missing Data Excluded")
mean(daily.steps$steps, na.rm = TRUE)
median(daily.steps$steps, na.rm = TRUE)
library(dplyr)
library(ggplot2)
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
tsplot <- ggplot(df.interval, aes(x=interval, y = avg))
tsplot + geom_line(aes(color = "red"), show.legend = F) + xlab("Interval") + ylab("Avg Number of Steps Taken") + ggtitle("Avg Number of Steps per Interval")
max.steps <- df.interval$interval[which.max(df.interval$avg)]
max.steps
nrow(df[is.na(df$steps),])
df.full <- df
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
for(i in 1:nrow(df.full)){
if(is.na(df.full[i,]$steps)){
df.full[i,]$steps <- df.interval[df.interval$interval == df.full[i,]$interval,]$avg
}
}
daily.total <- aggregate(df$steps ~ df$date, FUN = sum, na.rm = TRUE)
daily.total.fixed <- aggregate(df.full$steps ~ df.full$date, FUN = sum)
hist(daily.total.fixed$`df.full$steps`, col = "blue", xlab = "Steps", main = "Total Steps per Day - Missing Data Fixed")
## Mean Total Steps Taken with no Missing Data
mean(daily.total.fixed$`df.full$steps`)
## Median Total Steps Taken with no Missing Data
median(daily.total.fixed$`df.full$steps`)
df.full$date <- as.Date(df.full$date, "%Y-%m-%d")
df.full$week <- ifelse(weekdays(df.full$date) == "Saturday" | weekdays(df.full$date) == "Sunday", "weekend", "weekday")
df.interval.week <- df.full %>%
group_by(interval, week) %>%
summarize(avgStep = mean(steps))
plot <- ggplot(df.interval.week, aes(x=interval, y= avgStep, color = week)) + geom_line() +
labs(title = "Avg Daily Steps During Weekend or Weekday", x = "Interval", y = "Avg Steps") +
facet_wrap(~week, ncol = 1, nrow = 2)
print(plot)
knit2html()
install.packages("knitr")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("activity.csv")
daily.steps <- aggregate(df$steps ~ df$date, FUN = sum)
colnames(daily.steps) <- c("date", "steps")
## Remove NAs
daily.steps <- daily.steps[!is.na(daily.steps$steps),]
hist(x=daily.steps$steps, col = "orange", xlab = "Total Daily Steps", main = "Histogram of Total Daily Steps - Missing Data Excluded")
mean(daily.steps$steps, na.rm = TRUE)
median(daily.steps$steps, na.rm = TRUE)
library(dplyr)
library(ggplot2)
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
tsplot <- ggplot(df.interval, aes(x=interval, y = avg))
tsplot + geom_line(aes(color = "red"), show.legend = F) + xlab("Interval") + ylab("Avg Number of Steps Taken") + ggtitle("Avg Number of Steps per Interval")
max.steps <- df.interval$interval[which.max(df.interval$avg)]
max.steps
nrow(df[is.na(df$steps),])
df.full <- df
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
for(i in 1:nrow(df.full)){
if(is.na(df.full[i,]$steps)){
df.full[i,]$steps <- df.interval[df.interval$interval == df.full[i,]$interval,]$avg
}
}
daily.total <- aggregate(df$steps ~ df$date, FUN = sum, na.rm = TRUE)
daily.total.fixed <- aggregate(df.full$steps ~ df.full$date, FUN = sum)
hist(daily.total.fixed$`df.full$steps`, col = "blue", xlab = "Steps", main = "Total Steps per Day - Missing Data Fixed")
## Mean Total Steps Taken with no Missing Data
mean(daily.total.fixed$`df.full$steps`)
## Median Total Steps Taken with no Missing Data
median(daily.total.fixed$`df.full$steps`)
df.full$date <- as.Date(df.full$date, "%Y-%m-%d")
df.full$week <- ifelse(weekdays(df.full$date) == "Saturday" | weekdays(df.full$date) == "Sunday", "weekend", "weekday")
df.interval.week <- df.full %>%
group_by(interval, week) %>%
summarize(avgStep = mean(steps))
plot <- ggplot(df.interval.week, aes(x=interval, y= avgStep, color = week)) + geom_line() +
labs(title = "Avg Daily Steps During Weekend or Weekday", x = "Interval", y = "Avg Steps") +
facet_wrap(~week, ncol = 1, nrow = 2)
print(plot)
knit2html()
knit2html()
install.packages("markdown")
knit2html()
library(markdown)
knit2html()
library(knitr)
knit2html()
getwd()
setwd("e:/coursera/reproducible_research/")
setwd("e:/coursera/reproducible_research/course_project/reproducible_research")
setwd("e:/coursera/reproducible_research/course_project/reproducible_research/")
setwd("e:/coursera/reproducible_research/reproducible_research/")
knit2html("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd")
rmarkdown::render("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit_with_parameters('E:/coursera/reproducible_research/course_project/PA1_template.Rmd')
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv("activity.csv")
daily.steps <- aggregate(df$steps ~ df$date, FUN = sum)
colnames(daily.steps) <- c("date", "steps")
## Remove NAs
daily.steps <- daily.steps[!is.na(daily.steps$steps),]
hist(x=daily.steps$steps, col = "orange", xlab = "Total Daily Steps", main = "Histogram of Total Daily Steps - Missing Data Excluded")
mean(daily.steps$steps, na.rm = TRUE)
median(daily.steps$steps, na.rm = TRUE)
library(dplyr)
library(ggplot2)
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
tsplot <- ggplot(df.interval, aes(x=interval, y = avg))
tsplot + geom_line(aes(color = "red"), show.legend = F) + xlab("Interval") + ylab("Avg Number of Steps Taken") + ggtitle("Avg Number of Steps per Interval")
max.steps <- df.interval$interval[which.max(df.interval$avg)]
max.steps
nrow(df[is.na(df$steps),])
df.full <- df
df.interval <- group_by(df, interval) %>%
summarize(avg = mean(steps, na.rm = TRUE))
for(i in 1:nrow(df.full)){
if(is.na(df.full[i,]$steps)){
df.full[i,]$steps <- df.interval[df.interval$interval == df.full[i,]$interval,]$avg
}
}
daily.total <- aggregate(df$steps ~ df$date, FUN = sum, na.rm = TRUE)
daily.total.fixed <- aggregate(df.full$steps ~ df.full$date, FUN = sum)
hist(daily.total.fixed$`df.full$steps`, col = "blue", xlab = "Steps", main = "Total Steps per Day - Missing Data Fixed")
## Mean Total Steps Taken with no Missing Data
mean(daily.total.fixed$`df.full$steps`)
## Median Total Steps Taken with no Missing Data
median(daily.total.fixed$`df.full$steps`)
df.full$date <- as.Date(df.full$date, "%Y-%m-%d")
df.full$week <- ifelse(weekdays(df.full$date) == "Saturday" | weekdays(df.full$date) == "Sunday", "weekend", "weekday")
df.interval.week <- df.full %>%
group_by(interval, week) %>%
summarize(avgStep = mean(steps))
plot <- ggplot(df.interval.week, aes(x=interval, y= avgStep, color = week)) + geom_line() +
labs(title = "Avg Daily Steps During Weekend or Weekday", x = "Interval", y = "Avg Steps") +
facet_wrap(~week, ncol = 1, nrow = 2)
print(plot)
